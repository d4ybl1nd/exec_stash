#! /bin/bash

# ***************************************************************************
# git installation script.
# rhel should work fine with the script, for other distros might won't work. 
# tested and working on Centos7
# ***************************************************************************

targetFile="/etc/yum.conf"
grepResult=$(grep -F 'exclude' $targetFile)

function getLineNumber {
    local LN=$(grep -n "${1}" $targetFile | grep -Eo '^[^:]+') 
    echo $LN;
}

function addExcludeEntry {
    echo " * adding excluding entry for git and git2u packages."
    local declare LN=$(( $( getLineNumber "distroverpkg") + 1 ))
    local EXC_ENTRY+="exclude=git.x86_64 git2u.x86_64"
    sudo sed -i "$((LN))i$EXC_ENTRY" "$targetFile"
}

function appendToExlcude {
    # should not include if git and git2u is already added in entry.
    echo " * excldue entry exist. appending git and git2u to excluded packages."
    local EXC_ENTRY=$(echo $grepResult | cut -d'=' -f 2)
    local LN=$( getLineNumber "exclude" )

    if [[ $grepResult != *"git.x86_64"* ]]; then
    echo " * git.x86_64 not included"
    EXC_ENTRY="$EXC_ENTRY git.x86_64"
    fi

    if [[ $grepResult != *"git2u.x86_64"* ]]; then
    echo " * git2u.x86_64 not included"
    EXC_ENTRY="$EXC_ENTRY git2u.x86_64"
    fi

    read -a ENTRY <<< "$EXC_ENTRY"
    ENTRY="${ENTRY[*]}"
    sudo sed -i "$((LN))s/.*/exclude=$ENTRY/" "$targetFile"
}

function excludeGit {
    if [[ "$grepResult" == '' ]]; then
    # entry not found
    addExcludeEntry
    else
    # entry found 
    appendToExlcude
    fi
}

while true; do
    echo "=========================================================================="
    echo " * If you update git through yum after this installation, yum will"
    echo " * override the symlink that the script has created and will change"
    echo " * git to the latest version of what Centos Base repo provide."
    echo " * To prevent such update, git and git2u could be excluded from updating."
    echo "=========================================================================="
    read -p "Do you wish to exclude git and git2 from Centos Base Repo [y/n]? " yn
    case $yn in
        [Yy]* ) excludeGit; break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.";;
    esac
done

function buildGit {
    # install packages to compile and build the git from the source. 
    # complier and devlibs
    sudo yum install -y\
    gcc\
    perl-CPAN\
    perl-devel\
    curl-devel\
    expat-devel\
    openssl-devel\
    zlib-devel 

    # remove existing current bin or symlink
    gitPWD=$(which git)
    if [[ -a "$gitPWD" ]]; then 
    sudo yum remove -y git
    sudo rm -f "$gitPWD"
    fi
    
    tarGzSrc=$(basename $1)    
    srcDirBuffer="$(echo $tarGzSrc | sed s/.tar.gz//)"
    srcDirName=${srcDirBuffer/v/git-}
    
    # download tar.gz
    mkdir -p ~/Downloads
    cd ~/Downloads 
    wget $1

    # unzip and start build
    tar zxvf $tarGzSrc 
    cd $srcDirName
    sudo make prefix=/usr/share/git all
    sudo make prefix=/usr/share/git install
    sudo ln -s /usr/share/git/bin/git /usr/bin
    cd ..
    rm -f $tarGzSrc
    sudo rm -rf $srcDirName
    git --version
}

if [[ -n "$1" && "$1" == *"https://github.com/git/git/archive/"* &&  "$1" == *".tar.gz" ]]; then
    URL_CHECK=`wget --server-response --spider "$1"  2>&1 | grep 'HTTP/1.1 200 OK'`
    if [[ $URL_CHECK ]]; then
        echo "Installtion Start."
        crntPWD="$PWD"
        buildGit $1
        cd "$crntPWD"
        else
        echo "not found"
        echo "invalid version fed. Exiting."
        exit
    fi    
else
    echo "=========================================================================="
    echo " * Download URL is not provided or incorrect. Go to;"
    echo " * https://github.com/git/git/releases"
    echo " * Copy download link of tar.gz of the version you would like to build"
    echo " * and pass the link on excute."
    exit;
fi 


